y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
load(mtcars)
data(mtcars)
str(mtcars)
fit2 <- lm(weight ~ mpg, mtcars)
fit2 <- lm(wt ~ mpg, mtcars)
summary(fit2)
ggplot2(wt ~ mpg, mtcars)
library(ggplot2)
library(ggplot2)
ggplot2(wt ~ mpg, mtcars)
ggplot(wt ~ mpg, mtcars)
summary(fit2)
summary(fit2)$COEF
summary(fit2)$coef
fit2 <- lm(mpg ~ wt, mtcars)
summary(fit2)
sumCoef <- summary(fit2)$coef
sumCoef[1, 1] - qt(0.975, df = fit2$df) * sumCoef[1, 2]
fit2 <- lm(mpg ~ wt, mtcars)
fit2 <- lm(mtcars$mpg ~ mtcars$wt - mean(mtcars$wt))
wt2 <- mtcars$wt - mean(mtcars$wt)
fit2 <- lm(mtcars$mpg ~ wt2
)
summary(fit2)
sumCoef[1, 1] - qt(0.975, df = fit2$df) * sumCoef[1, 2]
sumCoef[1, 1] + qt(0.975, df = fit2$df) * sumCoef[1, 2]
fit2$df
qt(0.975, 30)
sumCoef <- summary(fit2)$coef
sumCoef[1, 1] + qt(0.975, df = fit2$df) * sumCoef[1, 2]
sumCoef[1, 1] - qt(0.975, df = fit2$df) * sumCoef[1, 2]
?mtcars
data(mtcars)
str(mtcars)
wt2 <- mtcars$wt - mean(mtcars$wt)
fit2 <- lm(mtcars$mpg ~ wt2)
sumCoef <- summary(fit2)$coef
sumCoef[1, 1] + c(-1, 1) * qt(0.975, df = fit2$df) * sumCoef[1, 2]
fit2 <- lm(mpg ~ I(wt - mean(wt)), data = mtcars)
sumCoef <- summary(fit2)$coef
sumCoef[1, 1] + c(-1, 1) * qt(0.975, df = fit2$df) * sumCoef[1, 2]
data(mtcars)
str(mtcars)
fit2 <- lm(mpg ~ I(wt - mean(wt)), data = mtcars)
sumCoef <- summary(fit2)$coef
sumCoef[1, 1] + c(-1, 1) * qt(0.975, df = fit2$df) * sumCoef[1, 2]
fit5 <- lm(mpg ~ wt, data = mtcars)
pred5 <- predict(fit5, newdata = 3000, interval = ("prediction"))
?predict
fit5 <- lm(mpg ~ wt, data = mtcars)
pred5 <- predict(fit5, newdata = data.frame(wt = 3000), interval = ("prediction"))
pred5
fit5 <- lm(mpg ~ wt, data = mtcars)
pred5 <- predict(fit5, newdata = data.frame(wt = 3), interval = ("prediction"))
pred5
fit6 <- lm(mpg ~ I(wt / 2), data = mtcars)
sumCoef6 <- summary(fit6)$coef
sumCoef6[2, 1] + c(-1, 1) * qt(0.975, df = fit6$df) * sumCoef6[2, 2]
fit9a <- lm(mpg ~ wt -1, mtcars)
fit9b <- lm(mpg ~ wt, mtcars)
summary(fit9a)
temp<-summary(fit9a)
fit9a$r.squared / fit9b$r.squared
fit9a$r.squared
fit9b$r.squared
summary(fit9b)
fit9a <- lm(mpg ~ 1, mtcars)
fit9b <- lm(mpg ~ wt, mtcars)
summary(fit9a)
summary(fit9a)$r.squared / summary(fit9b)$r.squared
summary(fit9a)$r.squared
summary(fit9a)
summary(fit9b)
temp<- summary(fit9a)
summary(fit9b)$sigma^2
summary(fit9a)$sigma^2
summary(fit9b)$sigma^2 / summary(fit9a)$sigma^2
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
swirl()
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
1 - resid(fit)[1] / resno
head(hatvalues(fit))
sigma <- sqrt(sum(resid(fit)^2) / resid(fit)$df)
temp <- resid(fit)
sigma <- sqrt(deviance(fit) / df.residual(fit))
rstd <- resid(fit) / (sigma * sqrt(1 - hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1 <- sqrt(deviance(fitno) / df.residual(fitno))
resid(fit)[1] / (sigma1 * sqrt(1 - hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out) - predict(fit, out2)
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / (2 * sigma^2)
plot(fit, which = 5)
cor(mtcars)["mpg", ]
rpg1()
rgp1()
rgp2()
head(Swiss)
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . - Examination)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3) / 43
n <- (deviance(fit1) - deviance(fit3)) / 2
n / d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
str(mtcars)
lm(mpg ~ factor(cyl) + wt, data = mtcars)
lm(mpg ~ factor(cyl), data = mtcars)
?lrt
??lrt
?anova
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit1, fit2)
anova(fit2, fit1)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ I(wt * 0.5), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit56 <- lm(y ~ x)
hatvalues(fit56)
dfbetas(fit56)
?dfbetas
dfbeta(fit56)
?mtcars
?show
?dgamma
?colSUms
?colSums
?show
swirl()
library(swirl)
swirl()
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = 'binomial', data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(0.95, lambda)
mdl2 <- glm(visits ~ date, poisson, hits, offset = log(visits + 1))
mdl2 <- glm(simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
?shuttle
glm(use ~ wind, data = shuttle, family = binomial)
library(MASS)
glm(use ~ wind, data = shuttle, family = binomial)
str(shuttle)
glm(use ~ wind + magn, data = shuttle, family = binomial)
str(InsectSprays)
?glm
library(MASS)
glm(use ~ wind, family = binomial, data = shuttle)
fit1 <- glm(use ~ wind, family = binomial, data = shuttle)
fit1$coefficients
fit1$coefficients[1]
exp(fit1$coefficients[1])
exp(fit1$coefficients[2])
?shuttle
fit2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
exp(fit2$coefficients[2])
fit2
fit3 <- glm(I(1 - use) ~ wind, family = binomial, data = shuttle)
shuttle$use
as.numeric(shuttle$use)
numeric(shuttle$use)
as.numeric(shuttle$use)
3 - as.numeric(shuttle$use)
factor(3 - as.numeric(shuttle$use))
fit3 <- glm(I(2 - as.numeric(use)) ~ wind, family = binomial, data = shuttle)
fit1$coefficients
fit3$coefficients
fit4 <- glm(count ~ spray, family = poisson, data = InsectSprays)
fit4
exp(fit4$coefficients[2])
exp(-fit4$coefficients[2])
library(MASS)
fit1 <- glm(use ~ wind, family = binomial, data = shuttle)
exp(fit1$coefficients[1] + fit1$coefficients[2])
1 / exp(fit1$coefficients[1] + fit1$coefficients[2])
fit2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
1 / exp(fit1$coefficients[1] + fit1$coefficients[2])
fit2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
1 / exp(fit2$coefficients[1] + fit2$coefficients[2])
fit3a <- glm(I(as.numeric(use) - 1) ~ wind, family = binomial, data = shuttle)
fit3b <- glm(I(2 - as.numeric(use)) ~ wind, family = binomial, data = shuttle)
fit3a$coefficients
fit3b$coefficients
fit1
fit4 <- glm(count ~ spray, family = poisson, data = InsectSprays)
fit4
fit4 <- glm(count ~ spray, family = poisson, data = InsectSprays)
exp(-fit4$coefficients[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x2 <- x(x >= 0)
y2 <- y(x >= 0)
lm(y2 ~ x2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x2 <- x(x >= 0)
y2 <- y(x >= 0)
x2 <- x[x >= 0]
y2 <- y[x >= 0]
lm(y2 ~ x2)
x2
y2
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x2 <- x[x > 0]
y2 <- y[x > 0]
lm(y2 ~ x2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x2 <- x[x >= 0]
y2 <- y[x >= 0]
x2
y2
library(ggplot2)
qplot(x, y)
?shuttle
str(shuttle)
View(shuttle)
shuttle$use
as.numeric(shuttle$use)
fit1 <- glm(I(2 - as.numeric(use)) ~ wind, family = binomial, data = shuttle)
fit1
fit1 <- glm(I(2 - as.numeric(use)) ~ wind, family = binomial, data = shuttle)
exp(fit1$coefficients[1])
1 / exp(fit1$coefficients[1])
shuttle$wind
fit1 <- glm(I(2 - as.numeric(use)) ~ I(2 - as.numeric(wind)), family = binomial, data = shuttle)
exp(fit1$coefficients[1])
1 / exp(fit1$coefficients[1])
fit1 <- glm(I(2 - as.numeric(use)) ~ I(as.numeric(wind) - 1), family = binomial, data = shuttle)
exp(fit1$coefficients[1])
1 / exp(fit1$coefficients[1])
fit1 <- glm(I(as.numeric(wind) - 1) ~ I(2 - as.numeric(use)), family = binomial, data = shuttle)
exp(fit1$coefficients[1])
1 / exp(fit1$coefficients[1])
fit1 <- glm(wind ~ use, family = binomial, data = shuttle)
fit1
exp(fit1$coefficients)
fit1 <- glm(use ~ wind, family = binomial, data = shuttle)
exp(fit1$coefficients[2])
exp(fit1$coefficients[2])
1 / exp(fit1$coefficients[2])
exp(fit1$coefficients[1] + fit1$coefficients[2])
fit1 <- glm(use ~ wind, family = binomial, data = shuttle)
exp(fit1$coefficients[2])
fit2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
exp(fit2$coefficients[2])
?glm
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",
destfile="./data/gaData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",
destfile="gaData.rda")
load("gaData.rda")
fit5a <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(visits+1),
family="poisson",data=gaData)
fit5a
fit5a <- glm(gaData$simplystats ~ julian(gaData$date) + offset(log(visits+1)),
family = "poisson", data = gaData)
fit5a <- glm(gaData$simplystats ~ julian(gaData$date) + offset(log(visits+1)),
family = "poisson", data = gaData)
fit5a <- glm(gaData$simplystats ~ julian(gaData$date) + offset(log(10) + log(visits+1)),
family = "poisson", data = gaData)
fit5a
fit5b
fit5a <- glm(gaData$simplystats ~ julian(gaData$date) + offset(log(visits+1)),
family = "poisson", data = gaData)
fit5b <- glm(gaData$simplystats ~ julian(gaData$date) + offset(log(10) + log(visits+1)),
family = "poisson", data = gaData)
fit5a
fit5b
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
install.packages("shinyapps")
shiny::runApp('camejia_svn/Coursera/datasciencecoursera/Developing Data Products')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='camejia', token='EB0FF30C55641C28390670D1D9B9ECBC', secret='9W/j/Wbkh+3EurbSD3qYOuUSSJJjd82p6C1zzSik')
setwd("~/camejia_svn/Coursera/datasciencecoursera/Developing Data Products")
shiny::runApp()
shiny::runApp('~/GitHub/clustering_lab')
setwd("~/GitHub/clustering_lab")
nClustersSimulate <- 5
kClustersPartition <- 5
nPoints <- 60  # divisible up to 6
# nPointsPerClusterSimulated <- nPoints / nClustersSimulate
xOff <- rnorm(nPoints, mean = 0, sd = 0.05)
yOff <- rnorm(nPoints, mean = 0, sd = 0.05)
xCtr <- runif(nClustersSimulate)
yCtr <- runif(nClustersSimulate)
clusterIdSimulated <- seq(1, nClustersSimulate)
clusteredData <- data.frame(x = xOff + rep(xCtr), y = yOff + rep(yCtr),
clusterIdSimulated)
clusteredData$x[clusteredData$x < 0] <- 0
clusteredData$x[clusteredData$y < 0] <- 0
clusteredData$x[clusteredData$x > 1] <- 1
clusteredData$y[clusteredData$y > 1] <- 1
fit <- kmeans(clusteredData[, c("x", "y")], kClustersPartition)
clusteredData$clusterIdFit <- factor(fit$cluster)
clusteredData$clusterIdSimulated <- factor(clusteredData$clusterIdSimulated)
clusteredData
fit
fit$centers
fit$centers$x
class(fit$centers)
voronoi <- deldir(fit$centers[, 1], fit$centers[, 2])
library(deldir)
voronoi <- deldir(fit$centers[, 1], fit$centers[, 2])
install.packages("deldir")
library(deldir)
voronoi <- deldir(fit$centers[, 1], fit$centers[, 2])
voronoi
ggplot(clusteredData, aes(x, y)) +
#Plot the voronoi lines
geom_segment(
aes(x = x1, y = y1, xend = x2, yend = y2),
size = 2,
data = voronoi$dirsgs,
linetype = 1,
color= "#FFB958") +
#Plot the points
aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1)
shiny::runApp()
shiny::runApp()
# See 6.00.2x Lab: K-Means from Week 7
# https://courses.edx.org/courses/MITx/6.00.2_2x/3T2014/courseware/edfd3922413e46368dceb9447a5e711d/8ee5730c00b54ef3ab0e6ab0541a682d/
# Distance metric
# Euclidean
# Initialization of centroids
# Initialize at a random position
# Simulation control
# of underlying Gaussians:
# of means to initialize:
# Generate new data
# Run the algorithm
nClustersSimulate <- 5
kClustersPartition <- 5
nPoints <- 60  # divisible up to 6
# nPointsPerClusterSimulated <- nPoints / nClustersSimulate
xOff <- rnorm(nPoints, mean = 0, sd = 0.05)
yOff <- rnorm(nPoints, mean = 0, sd = 0.05)
xCtr <- runif(nClustersSimulate)
yCtr <- runif(nClustersSimulate)
clusterIdSimulated <- seq(1, nClustersSimulate)
clusteredData <- data.frame(x = xOff + rep(xCtr), y = yOff + rep(yCtr),
clusterIdSimulated)
clusteredData$x[clusteredData$x < 0] <- 0
clusteredData$x[clusteredData$y < 0] <- 0
clusteredData$x[clusteredData$x > 1] <- 1
clusteredData$y[clusteredData$y > 1] <- 1
fit <- kmeans(clusteredData[, c("x", "y")], kClustersPartition)
clusteredData$clusterIdFit <- factor(fit$cluster)
clusteredData$clusterIdSimulated <- factor(clusteredData$clusterIdSimulated)
library(ggplot2)
library(deldir)
voronoi <- deldir(fit$centers[, 1], fit$centers[, 2])
ggplot(clusteredData, aes(x, y)) +
#Plot the voronoi lines
geom_segment(
aes(x = x1, y = y1, xend = x2, yend = y2),
size = 2,
data = voronoi$dirsgs,
linetype = 1,
color= "#FFB958") +
#Plot the points
aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1)
clusteredData$clusterIdFit <- factor(fit$cluster)
clusteredData$clusterIdSimulated <- factor(clusteredData$clusterIdSimulated)
voronoi <- deldir(fit$centers[, 1], fit$centers[, 2])
ggplot(clusteredData, aes(x, y)) +
#Plot the voronoi lines
geom_segment(
aes(x = x1, y = y1, xend = x2, yend = y2),
size = 2,
data = voronoi$dirsgs,
linetype = 1,
color= "#FFB958") +
#Plot the points
# aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1)
ggplot(clusteredData, aes(x, y)) +
#Plot the points
aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1) +
#Plot the voronoi lines
geom_segment(
aes(x = x1, y = y1, xend = x2, yend = y2),
size = 2,
data = voronoi$dirsgs,
linetype = 1,
color= "#FFB958") +
)
ggplot(clusteredData, aes(x, y)) +
#Plot the points
aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1) +
#Plot the voronoi lines
geom_segment(
aes(x = x1, y = y1, xend = x2, yend = y2),
size = 2,
data = voronoi$dirsgs,
linetype = 1,
color= "#FFB958")
ggplot(voronoi$dirsgs, aes(x = x1, y = y1, xend = x2, yend = y2)) +
geom_segment(size = 2,
linetype = 1,
color= "#FFB958")
g <- ggplot(clusteredData, aes(x, y)) +
#Plot the points
aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1) +
g <- g + ggplot(voronoi$dirsgs, aes(x = x1, y = y1, xend = x2, yend = y2)) +
geom_segment(size = 2,
linetype = 1,
color= "#FFB958")
g
g <- ggplot(clusteredData, aes(x, y)) +
#Plot the points
aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1) +
g <- g + ggplot(voronoi$dirsgs, aes(x = x1, y = y1, xend = x2, yend = y2)) +
geom_segment(size = 2,
linetype = 1,
color= "#FFB958")
g
g <- ggplot(clusteredData, aes(x, y)) +
#Plot the points
aes(shape = clusterIdSimulated) +
geom_point(aes(colour = clusterIdFit), size = 4) +
ggtitle("Clustered Data") +
xlim(-0.1, 1.1) + ylim(-0.1, 1.1)
g <- g + ggplot(voronoi$dirsgs, aes(x = x1, y = y1, xend = x2, yend = y2)) +
geom_segment(size = 2,
linetype = 1,
color= "#FFB958")
g
ggplot() +
geom_point(data = clusteredData, aes(x = x, y = y))
